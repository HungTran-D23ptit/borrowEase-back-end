import { Admin, BorrowRequest } from '@/models'
import {
    createReminderNotification,
    createOverdueNotification
} from '@/app/services/notification.service'

export async function runBorrowCheckerJob() {
    const now = new Date()
    const tomorrow = new Date()
    tomorrow.setDate(now.getDate() + 1)

    const todayStr = now.toISOString().split('T')[0]
    console.log(`[${todayStr}] ‚öôÔ∏è Running borrow checker job...`)

    // 1. L·∫•y t·∫•t c·∫£ y√™u c·∫ßu m∆∞·ª£n ƒëang c√≤n hi·ªáu l·ª±c ho·∫∑c qu√° h·∫°n
    const activeRequests = await BorrowRequest.find({
        status: { $in: ['APPROVED', 'OVERDUE'] },
    }).populate('user device')

    if (!activeRequests.length) {
        console.log('‚úÖ Kh√¥ng c√≥ y√™u c·∫ßu ƒëang m∆∞·ª£n.')
        return
    }

    // 2. L·∫•y danh s√°ch admin ƒëang ho·∫°t ƒë·ªông (ch∆∞a xo√° v√† status ACTIVE)
    const admins = await Admin.find({ deleted: false, status: 'ACTIVE' })

    console.log(`üì¶ T·ªïng s·ªë y√™u c·∫ßu c·∫ßn x·ª≠ l√Ω: ${activeRequests.length}`)

    for (const request of activeRequests) {
        const returnDate = new Date(request.return_date)
        const user = request.user
        const device = request.device

        if (!user || !device) {
            console.warn(`‚ö†Ô∏è Thi·∫øu user/device cho request ${request._id}`)
            continue
        }

        const isTomorrow = isSameDay(returnDate, tomorrow)

        // G·ª≠i nh·∫Øc nh·ªü s·∫Øp ƒë·∫øn h·∫°n
        if (isTomorrow && request.status !== 'OVERDUE') {
            console.log(`üîî Nh·∫Øc nh·ªü: ${user.name} c·∫ßn tr·∫£ ${device.name} v√†o ${returnDate.toLocaleString('vi-VN')}`)
            await createReminderNotification({
                user,
                device,
                returnDate: request.return_date,
                borrowRequestId: request._id,
            })
        }

        // G·ª≠i c·∫£nh b√°o n·∫øu ƒë∆°n ƒë√£ ƒë∆∞·ª£c ƒë√°nh d·∫•u l√† OVERDUE
        if (request.status === 'OVERDUE') {
            console.log(`‚õî Qu√° h·∫°n: ${user.name} ch∆∞a tr·∫£ ${device.name} (h·∫°n: ${returnDate.toLocaleString('vi-VN')})`)
            await createOverdueNotification({
                user,
                device,
                returnDate: request.return_date,
                borrowRequestId: request._id,
                admins,
            })
        }
    }

    console.log('‚úÖ Borrow checker job ho√†n t·∫•t.')
}

// So s√°nh 2 ng√†y (b·ªè gi·ªù)
function isSameDay(date1, date2) {
    return (
        date1.getFullYear() === date2.getFullYear() &&
        date1.getMonth() === date2.getMonth() &&
        date1.getDate() === date2.getDate()
    )
}